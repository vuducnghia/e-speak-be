basePath: /api
definitions:
  handlers.Character:
    properties:
      char:
        example: dʒ
        type: string
      confidence:
        example: 0.9997
        type: number
      end_offset:
        example: 0.24
        type: number
      start_offset:
        example: 0.16
        type: number
    type: object
  handlers.ResponsePhoneme:
    properties:
      characters:
        items:
          $ref: '#/definitions/handlers.Character'
        type: array
      confident:
        example: 0.92
        type: number
      ground_truth_benchmark:
        example: ˈrʌ[ˌ]baʊt dʒi ɛm i ɛf θri naɪn
        type: string
      predict:
        example: ˈrʌbaʊt dʒi ɛm i ɛf θri naɪn
        type: string
    type: object
  models.Image:
    properties:
      metadata:
        additionalProperties: true
        type: object
      name:
        type: string
      path:
        type: string
      size_in_bytes:
        type: integer
      thumbnail_url:
        type: string
      url:
        type: string
    type: object
  models.InternalError:
    properties:
      details:
        type: string
      message:
        type: string
      status:
        type: integer
      type:
        type: string
    type: object
  models.PaginationMeta:
    properties:
      current_page:
        type: integer
      page_count:
        type: integer
      total_count:
        type: integer
    type: object
  models.PaginationWrapper:
    properties:
      data:
        type: object
      metadata:
        $ref: '#/definitions/models.PaginationMeta'
    type: object
  models.User:
    properties:
      avatar:
        type: string
      email:
        type: string
      google_id:
        type: string
      is_pay:
        type: boolean
      username:
        type: string
    required:
    - email
    - username
    type: object
  models.UserCredentials:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserDictionaries:
    properties:
      vocabulary_id:
        type: string
    type: object
  models.ValidationError:
    properties:
      details:
        type: string
      message:
        type: string
      status:
        type: integer
      type:
        type: string
      validation_errors:
        additionalProperties:
          type: string
        type: object
    type: object
  models.Vocabulary:
    properties:
      audio_url:
        type: string
      text:
        type: string
      transcript_ipa:
        type: string
      translation:
        type: string
    type: object
host: localhost:9000
info:
  contact: {}
  title: Swagger Boilerplate API
  version: "1.0"
paths:
  /application/heartbeat:
    get:
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalError'
      summary: return a status
      tags:
      - heartbeat
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCredentials'
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: logout current account
      tags:
      - auth
  /auth/refresh_token:
    post:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
      summary: create a user
      tags:
      - auth
  /check-phonemes:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Audio file to upload
        in: formData
        name: audio_file
        required: true
        type: file
      - description: ground_truth
        in: formData
        name: ground_truth
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ResponsePhoneme'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.InternalError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalError'
      summary: upload an audio with phoneme
      tags:
      - phonemes
  /errors/{id}:
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InternalError'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ValidationError'
      security:
      - Bearer: []
      summary: return an error
      tags:
      - errors
  /images:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Image file to upload
        in: formData
        name: image_file
        required: true
        type: file
      - description: Thumbnail image file to upload
        in: formData
        name: image_thumbnail_file
        required: true
        type: file
      - description: Metadata associated with the image
        in: formData
        name: metadata
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Image'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ValidationError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalError'
      summary: upload an image with thumbnail
      tags:
      - images
  /lessons:
    get:
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: page_number
        in: query
        name: page_number
        type: string
      - description: type
        in: query
        name: type
        type: string
      - description: name
        in: query
        name: name
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginationWrapper'
        "404":
          description: Entity Not Found
          schema:
            $ref: '#/definitions/models.InternalError'
      security:
      - Bearer: []
      summary: return list lessons
      tags:
      - lessons
  /lessons/ipa:
    get:
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: return list IPA
      tags:
      - lessons
  /users:
    get:
      parameters:
      - description: limit
        in: query
        name: limit
        type: string
      - description: page_number
        in: query
        name: page_number
        type: string
      - description: search_query
        in: query
        name: search_query
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaginationWrapper'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalError'
      security:
      - Bearer: []
      summary: return list users
      tags:
      - users
  /users/{user_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.InternalError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalError'
      security:
      - Bearer: []
      summary: delete a user
      tags:
      - users
    get:
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.InternalError'
      security:
      - Bearer: []
      summary: return a user
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: user_id
        in: path
        name: user_id
        required: true
        type: string
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ValidationError'
        "404":
          description: Entity Not Found
          schema:
            $ref: '#/definitions/models.InternalError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.InternalError'
      security:
      - Bearer: []
      summary: update a user
      tags:
      - users
  /users/{user_id}/dictionaries:
    post:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: dictionaries
        in: body
        name: dictionaries
        required: true
        schema:
          $ref: '#/definitions/models.UserDictionaries'
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: add vocabulary in dictionary
      tags:
      - users
  /users/{user_id}/dictionaries/{vocabulary_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: string
      - description: vocabulary id
        in: path
        name: vocabulary_id
        required: true
        type: string
      responses:
        "200":
          description: OK
      security:
      - Bearer: []
      summary: delete dictionary
      tags:
      - users
  /vocabularies/detail/{word}:
    get:
      consumes:
      - application/json
      description: Retrieves the vocabulary entry that matches the specified word
        or phrase.
      parameters:
      - description: Vocabulary term to search for
        in: path
        name: word
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Vocabulary details for the matching term
          schema:
            $ref: '#/definitions/models.Vocabulary'
      summary: Fetch vocabulary details
      tags:
      - vocabularies
  /vocabularies/search:
    get:
      consumes:
      - application/json
      description: Retrieve vocabulary entries that match the provided word.
      parameters:
      - description: The vocabulary word to search for
        in: query
        name: word
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of matching vocabulary entries
          schema:
            items:
              $ref: '#/definitions/models.Vocabulary'
            type: array
      summary: Search vocabularies by word
      tags:
      - vocabularies
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
